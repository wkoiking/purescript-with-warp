-- File auto generated by purescript-bridge! --
module Main where

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Int, Number, String)

import Prelude

newtype MyRecordType =
    MyRecordType {
      myRec1 :: Int
    , myRec2 :: String
    }

derive instance genericMyRecordType :: Generic MyRecordType _
derive instance newtypeMyRecordType :: Newtype MyRecordType _

--------------------------------------------------------------------------------
_MyRecordType :: Iso' MyRecordType { myRec1 :: Int, myRec2 :: String}
_MyRecordType = _Newtype

--------------------------------------------------------------------------------
data MyEnumType =
    MyEnum1 Int String
  | MyEnum2 Int
  | MyEnum3 Number
  | MyEnum4

derive instance genericMyEnumType :: Generic MyEnumType _

--------------------------------------------------------------------------------
_MyEnum1 :: Prism' MyEnumType { a :: Int, b :: String }
_MyEnum1 = prism' (\{ a, b } -> MyEnum1 a b) f
  where
    f (MyEnum1 a b) = Just $ { a: a, b: b }
    f _ = Nothing

_MyEnum2 :: Prism' MyEnumType Int
_MyEnum2 = prism' MyEnum2 f
  where
    f (MyEnum2 a) = Just $ a
    f _ = Nothing

_MyEnum3 :: Prism' MyEnumType Number
_MyEnum3 = prism' MyEnum3 f
  where
    f (MyEnum3 a) = Just $ a
    f _ = Nothing

_MyEnum4 :: Prism' MyEnumType Unit
_MyEnum4 = prism' (\_ -> MyEnum4) f
  where
    f MyEnum4 = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data MyNonRecordType =
    MyNonRecordType Int String

derive instance genericMyNonRecordType :: Generic MyNonRecordType _

--------------------------------------------------------------------------------
_MyNonRecordType :: Prism' MyNonRecordType { a :: Int, b :: String }
_MyNonRecordType = prism' (\{ a, b } -> MyNonRecordType a b) f
  where
    f (MyNonRecordType a b) = Just $ { a: a, b: b }

--------------------------------------------------------------------------------
newtype MyNewtype =
    MyNewtype Int

derive instance genericMyNewtype :: Generic MyNewtype _
derive instance newtypeMyNewtype :: Newtype MyNewtype _

--------------------------------------------------------------------------------
_MyNewtype :: Iso' MyNewtype Int
_MyNewtype = _Newtype
--------------------------------------------------------------------------------
